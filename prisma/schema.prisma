// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ONGOING
  COMPLETED
  HIATUS
}

model User {
  id                 String             @id @default(uuid())
  avatar             String?
  firstName          String
  lastName           String
  bio                String?
  username           String             @unique
  email              String             @unique
  password           String
  role               Role               @default(USER)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  novels             Novel[]
  Series             Series[]
  subscriptions      Subscription[]
  Likes              Likes[]
  Comments           Comments[]
  Posts              Post[]
  PostComments       PostComment[]
  PostLikes          PostLike[]
  PostCommentReplies PostCommentReply[]
  Followers          Follow[]           @relation("follower")
  Followings         Follow[]           @relation("following")
}

model Genre {
  id             String   @id @default(uuid())
  name           String   @unique
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  novels         Novel[]  @relation("GenreNovels")
  subGenreNovels Novel[]  @relation("SubGenreNovels")
  coverImage     String?
}

model Novel {
  id          String    @id @default(uuid())
  title       String    @unique
  description String
  likes       Int       @default(0)
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  series      Series?   @relation(fields: [seriesId], references: [id])
  seriesId    String?
  genre       Genre     @relation("GenreNovels", fields: [genreId], references: [id])
  genreId     String
  subGenre    Genre     @relation("SubGenreNovels", fields: [subGenreId], references: [id])
  subGenreId  String
  status      Status    @default(ONGOING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chapters    Chapter[]
  coverImage  String
  Likes       Likes[]
}

model Series {
  id          String   @id @default(uuid())
  title       String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  novels      Novel[]
  coverImage  String
  forum       Forum?
  Likes       Likes[]
}

model Chapter {
  id        String     @id @default(uuid())
  title     String
  content   String
  likes     Int        @default(0)
  views     Int        @default(0)
  novel     Novel      @relation(fields: [novelId], references: [id])
  novelId   String
  number    Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  thumbnail String
  Likes     Likes[]
  Comments  Comments[]
}

model Plan {
  id              String          @id @default(uuid())
  name            String
  description     String
  price           Float
  billingInterval BillingInterval
  features        Json
  subscriptions   Subscription[]
}

model Subscription {
  id         String             @id @default(uuid())
  user       User               @relation(fields: [userId], references: [id])
  userId     String
  plan       Plan               @relation(fields: [planId], references: [id])
  planId     String
  pidx       String?            @unique
  status     SubscriptionStatus
  startDate  DateTime
  endDate    DateTime
  canceledAt DateTime?
}

model Likes {
  id            String       @id @default(uuid())
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  novel         Novel?       @relation(fields: [novelId], references: [id])
  novelId       String?
  chapter       Chapter?     @relation(fields: [chapterId], references: [id])
  chapterId     String?
  comment       Comments?    @relation(fields: [commentId], references: [id])
  commentId     String?
  series        Series?      @relation(fields: [seriesId], references: [id])
  seriesId      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  PostComment   PostComment? @relation(fields: [postCommentId], references: [id])
  postCommentId String?
}

model Comments {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  chapterId String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Likes     Likes[]
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Forum {
  id        String   @id @default(uuid())
  title     String
  posts     Post[]
  series    Series   @relation(fields: [seriesId], references: [id])
  seriesId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id                 String             @id @default(uuid())
  title              String
  content            String
  user               User               @relation(fields: [userId], references: [id])
  userId             String
  forum              Forum              @relation(fields: [forumId], references: [id])
  forumId            String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  PostComments       PostComment[]
  PostLikes          PostLike[]
  PostCommentReplies PostCommentReply[]
}

model PostComment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Likes     Likes[]
}

model PostLike {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostCommentReply {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BillingInterval {
  MONTH
  YEAR
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  CANCELED
  EXPIRED
}
