// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid())
  avatar             String?
  firstName          String
  lastName           String
  bio                String?
  username           String             @unique
  email              String             @unique
  phone              String?            @unique
  password           String
  role               Role               @default(USER)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  books              Book[]
  Series             Series[]
  subscriptions      Subscription[]
  Likes              Likes[]
  Comments           Comments[]
  Posts              Post[]
  PostComments       PostComment[]
  PostLikes          PostLike[]
  PostCommentReplies PostCommentReply[]
  Followers          Follow[]           @relation("follower")
  Followings         Follow[]           @relation("following")
  Forum              Forum[]
  History            History[]
  AuthorRequest      AuthorRequest[]
}

model Genre {
  id            String   @id @default(uuid())
  name          String   @unique
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  books         Book[]   @relation("GenreBooks")
  subGenreBooks Book[]   @relation("SubGenreBooks")
  coverImage    String?
}

model Book {
  id           String         @id @default(uuid())
  title        String         @unique
  description  String
  likes        Int            @default(0)
  author       User           @relation(fields: [authorId], references: [id])
  authorId     String
  type         BookType       @default(NOVEL)
  series       Series?        @relation(fields: [seriesId], references: [id])
  seriesId     String?
  genre        Genre          @relation("GenreBooks", fields: [genreId], references: [id])
  genreId      String
  subGenre     Genre          @relation("SubGenreBooks", fields: [subGenreId], references: [id])
  subGenreId   String
  status       Status         @default(ONGOING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  chapters     Chapter[]
  coverImage   String
  Likes        Likes[]
  ComicChapter ComicChapter[]
  isPremium    Boolean        @default(false)

  @@map("Book")
}

model Series {
  id          String   @id @default(uuid())
  title       String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  books       Book[]
  coverImage  String
  Likes       Likes[]
}

model Chapter {
  id        String     @id @default(uuid())
  title     String
  thumbnail String
  content   String
  views     Int        @default(0)
  book      Book       @relation(fields: [bookId], references: [id])
  bookId    String
  number    Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Likes     Likes[]
  Comments  Comments[]
  History   History[]
}

model ComicChapter {
  id         String       @id @default(uuid())
  title      String
  thumbnail  String
  views      Int          @default(0)
  book       Book         @relation(fields: [bookId], references: [id])
  bookId     String
  number     Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  ComicImage ComicImage[]
  Likes      Likes[]
  Comments   Comments[]
  History    History[]
}

model ComicImage {
  id             String       @id @default(uuid())
  image          String
  ComicChapter   ComicChapter @relation(fields: [comicChapterId], references: [id])
  comicChapterId String
  number         Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model History {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  chapter        Chapter?      @relation(fields: [chapterId], references: [id])
  chapterId      String?
  comicChapter   ComicChapter? @relation(fields: [comicChapterId], references: [id])
  comicChapterId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Plan {
  id              String          @id @default(uuid())
  name            String
  description     String
  price           Float
  billingInterval BillingInterval
  features        Json
  subscriptions   Subscription[]
}

model Subscription {
  id         String             @id @default(uuid())
  user       User               @relation(fields: [userId], references: [id])
  userId     String
  plan       Plan               @relation(fields: [planId], references: [id])
  planId     String
  pidx       String?            @unique
  status     SubscriptionStatus
  startDate  DateTime
  endDate    DateTime
  canceledAt DateTime?
}

model Likes {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  book           Book?         @relation(fields: [bookId], references: [id])
  bookId         String?
  chapter        Chapter?      @relation(fields: [chapterId], references: [id])
  chapterId      String?
  comment        Comments?     @relation(fields: [commentId], references: [id])
  commentId      String?
  series         Series?       @relation(fields: [seriesId], references: [id])
  seriesId       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  PostComment    PostComment?  @relation(fields: [postCommentId], references: [id])
  postCommentId  String?
  ComicChapter   ComicChapter? @relation(fields: [comicChapterId], references: [id])
  comicChapterId String?
}

model Comments {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  chapter        Chapter?      @relation(fields: [chapterId], references: [id])
  chapterId      String?
  content        String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Likes          Likes[]
  ComicChapter   ComicChapter? @relation(fields: [comicChapterId], references: [id])
  comicChapterId String?
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Forum {
  id          String   @id @default(uuid())
  title       String
  coverImage  String?
  description String?
  posts       Post[]
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuthorRequest {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  status    RequestStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Post {
  id           String        @id @default(uuid())
  title        String
  content      String
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  forum        Forum         @relation(fields: [forumId], references: [id])
  forumId      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  PostComments PostComment[]
  PostLikes    PostLike[]
}

model PostComment {
  id               String             @id @default(uuid())
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  post             Post               @relation(fields: [postId], references: [id])
  postId           String
  content          String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Likes            Likes[]
  PostCommentReply PostCommentReply[]
}

model PostLike {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostCommentReply {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  postComment   PostComment @relation(fields: [postCommentId], references: [id])
  postCommentId String
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum Role {
  USER
  ADMIN
  AUTHOR
}

enum BookType {
  NOVEL
  COMIC
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Status {
  ONGOING
  COMPLETED
  HIATUS
}

enum BillingInterval {
  MONTH
  YEAR
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  CANCELED
  EXPIRED
}
